name: GPU Test Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on:
      - codebuild-gpu-test-${{ github.run_id }}-${{ github.run_attempt }}
      - image:381492037974.dkr.ecr.us-east-1.amazonaws.com/codebuild-cuda12-test:latest
      - instance-size:gpu_large

    steps:
      - uses: actions/checkout@v3
      
      - name: System Info
        run: |
          echo "=== System Information ==="
          uname -a
          cat /etc/os-release
          
      - name: Environment Info
        run: |
          echo "=== Environment Variables ==="
          env | grep -i cuda
          echo "=== CUDA Path ==="
          ls -l /usr/local/cuda*
          
      - name: GPU Info
        run: |
          echo "=== GPU Information ==="
          nvidia-smi
          echo "=== CUDA Version ==="
          nvcc --version
          
      - name: Create and Run Basic CUDA Test
        run: |
          echo "=== Creating Basic CUDA Test ==="
          cat > basic_test.cu << 'EOL'
          #include <stdio.h>
          
          __global__ void hello_kernel() {
              printf("Hello from GPU! (Thread %d)\n", threadIdx.x);
          }
          
          int main() {
              hello_kernel<<<1, 4>>>();
              cudaDeviceSynchronize();
              return 0;
          }
          EOL
          
          echo "=== Compiling Basic CUDA Test ==="
          nvcc basic_test.cu -o basic_test
          
          echo "=== Running Basic CUDA Test ==="
          ./basic_test
          
      - name: Create and Run Vector Addition Test
        run: |
          echo "=== Creating Vector Addition Test ==="
          cat > vector_add.cu << 'EOL'
          #include <stdio.h>
          #include <cuda_runtime.h>
          
          __global__ void vectorAdd(float *a, float *b, float *c, int n) {
              int i = blockIdx.x * blockDim.x + threadIdx.x;
              if (i < n) c[i] = a[i] + b[i];
          }
          
          int main() {
              int n = 1024;
              size_t size = n * sizeof(float);
              
              float *h_a = (float *)malloc(size);
              float *h_b = (float *)malloc(size);
              float *h_c = (float *)malloc(size);
              
              for (int i = 0; i < n; i++) {
                  h_a[i] = i * 1.0f;
                  h_b[i] = i * 2.0f;
              }
              
              float *d_a, *d_b, *d_c;
              cudaMalloc(&d_a, size);
              cudaMalloc(&d_b, size);
              cudaMalloc(&d_c, size);
              
              cudaMemcpy(d_a, h_a, size, cudaMemcpyHostToDevice);
              cudaMemcpy(d_b, h_b, size, cudaMemcpyHostToDevice);
              
              int blockSize = 256;
              int numBlocks = (n + blockSize - 1) / blockSize;
              vectorAdd<<<numBlocks, blockSize>>>(d_a, d_b, d_c, n);
              
              cudaMemcpy(h_c, d_c, size, cudaMemcpyDeviceToHost);
              
              bool success = true;
              for (int i = 0; i < n; i++) {
                  if (h_c[i] != h_a[i] + h_b[i]) {
                      printf("Verification failed at %d\n", i);
                      success = false;
                      break;
                  }
              }
              if (success) printf("CUDA Vector Addition Test Passed!\n");
              
              cudaFree(d_a);
              cudaFree(d_b);
              cudaFree(d_c);
              free(h_a);
              free(h_b);
              free(h_c);
              
              return 0;
          }
          EOL
          
          echo "=== Compiling Vector Addition Test ==="
          nvcc vector_add.cu -o vector_add
          
          echo "=== Running Vector Addition Test ==="
          ./vector_add

      - name: CUDA Device Properties
        run: |
          echo "=== Creating Device Properties Test ==="
          cat > device_info.cu << 'EOL'
          #include <stdio.h>
          #include <cuda_runtime.h>
          
          int main() {
              int deviceCount;
              cudaGetDeviceCount(&deviceCount);
              printf("Found %d CUDA devices\n", deviceCount);
              
              for (int i = 0; i < deviceCount; i++) {
                  cudaDeviceProp prop;
                  cudaGetDeviceProperties(&prop, i);
                  printf("\nDevice %d: %s\n", i, prop.name);
                  printf("  Compute capability: %d.%d\n", prop.major, prop.minor);
                  printf("  Total global memory: %.2f GB\n", prop.totalGlobalMem / (1024.0 * 1024.0 * 1024.0));
                  printf("  Max threads per block: %d\n", prop.maxThreadsPerBlock);
                  printf("  Max threads dimensions: (%d, %d, %d)\n", prop.maxThreadsDim[0], prop.maxThreadsDim[1], prop.maxThreadsDim[2]);
                  printf("  Max grid dimensions: (%d, %d, %d)\n", prop.maxGridSize[0], prop.maxGridSize[1], prop.maxGridSize[2]);
                  printf("  Warp size: %d\n", prop.warpSize);
              }
              return 0;
          }
          EOL
          
          echo "=== Compiling Device Properties Test ==="
          nvcc device_info.cu -o device_info
          
          echo "=== Running Device Properties Test ==="
          ./device_info
